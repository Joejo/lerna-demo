/**
 * @description 权限数据 api 和 UI 数据转换工厂
 * @author cailuqi@sensorsdata.cn
 */

import produce from 'immer';
import _ from 'lodash';

/**
 * 整合数据权限和功能权限
 * @param {array} permissions 功能权限
 * @param {object} dataPermission 数据权限
 * @returns {object}
 */
const getAllPermissionMap = rolePermission => {
  return produce(rolePermission, rolePermission => {
    const { permissions = [], ...dataPermission } = rolePermission;
    let allPermission = { ...dataPermission };
    permissions.forEach(permission => {
      const { operation_id } = permission;
      allPermission[operation_id] = permission;
    });
    return allPermission;
  });
};

/**
 * 获取权限对应值
 * @param {object} child 权限信息
 * @param {object} allPermission 权限值 map 结构
 * @param {object} dataPermissionMap 映射关系
 */
const getPermissionValue = (child, allPermission = {}, dataPermissionMap) => {
  const { id, defaultValue = {} } = child;
  const permissionMap = dataPermissionMap[id];
  const isPermissionEmpty = _.isEmpty(allPermission);
  if (isPermissionEmpty && !_.isEmpty(defaultValue)) {
    return defaultValue;
  }
  let value = {};
  // 不存在映射关系则直接返回值
  if (!permissionMap) {
    value = allPermission[id] || {};
  } else if (typeof permissionMap === 'function') {
    value = permissionMap(allPermission);
  } else if (Array.isArray(permissionMap)) {
    permissionMap
      .filter(item => item && typeof item === 'string')
      .forEach(key => {
        // 不存在则不赋值
        if (typeof allPermission[key] !== 'undefined') {
          Object.assign(value, {
            [key]: allPermission[key],
          });
        }
      });
  } else if (typeof permissionMap === 'string') {
    if (typeof allPermission[permissionMap] !== 'undefined') {
      value = {
        [permissionMap]: allPermission[permissionMap],
      };
    }
  } else {
    throw Error(
      `operation_id为 ${id} 的 dataPermissionMap 传值类型错误。传入类型为 ${typeof permissionMap}，应只能为 string 或 array 或 function`
    );
  }
  return value;
};

/**
 * 权限数据 api -> UI
 * @param {array} permissionList 完整权限列表
 * @param {object} dataPermissionMap 数据权限映射
 * @param {object} rolePermission 角色权限
 * @param {object} config 配置
 */
const mapApiToUi = (
  permissionList = [],
  dataPermissionMap = {},
  rolePermission = {},
  config = {},
  getDefaultValue = () => {}
) => {
  const allPermission = getAllPermissionMap(rolePermission);
  const { isView, requireAllChecked } = config;
  let resultList = produce(permissionList, list => {
    list.forEach(permission => {
      let children = permission.children || [];
      // 处理权限数据
      children.forEach(child => {
        const { id, option = {} } = child;
        const { checkable } = option;
        // 获取数据
        const value = getPermissionValue(
          child,
          allPermission,
          dataPermissionMap
        );
        Reflect.deleteProperty(child, 'defaultValue');
        if (!_.isEmpty(value)) {
          child.hasPermission = true;
          child.value = value;
        } else {
          const value = getDefaultValue(id);
          value && (child.value = value);
          (checkable === false) && (child.hasPermission = true);
        }
        // 查看模式处理数据
        if (isView) {
          Reflect.deleteProperty(child, 'option');
        }
      });
      // 查看模式处理数据
      if (isView) {
        permission.children = children.filter(item => item.hasPermission);
        Reflect.deleteProperty(permission, 'option');
      }
      permission.checked = requireAllChecked
        ? !permission.children.find((item) => !item.hasPermission)
        : !!permission.children.find((item) => item.hasPermission);
    });
  });
  if (isView) {
    resultList = resultList.filter(item => !_.isEmpty(item.children));
  }
  return resultList;
};

/**
 * 检测是否有权限
 * @param {object} permission 当前权限
 * @param {object} group 权限组
 */
const checkHasPermission = (permission, group) => {
  const permissionCheckable = _.get(permission, ['option', 'checkable'], false);
  const groupCheckable = _.get(group, ['option', 'checkable'], false);
  if (permission.hasPermission) return true;
  // 当第一列不能被选中时， 或者已被选中，则不能被选中的权限ID 是默认选中的
  return (!groupCheckable || group.checked) && !permissionCheckable;
};
/**
 * 权限数据 UI -> API
 * @param {array} currentPermissionList 当前权限列表
 * @param {object} dataPermissionMap 数据权限映射表
 * @returns {object}
 */
const mapUiToApi = (currentPermissionList = [], dataPermissionMap = {}) => {
  let rolePermission = {};
  let permissions = [];
  currentPermissionList.forEach(permission => {
    permission.children.forEach(child => {
      // 权限未被选中则不进入最终列表
      if (!checkHasPermission(child, permission)) return;
      // 权限 ID 在映射表中，进行单独处理
      if (dataPermissionMap[child.id]) {
        let value = {};
        Object.keys(child.value || {}).forEach(key => {
          // 传入的数据权限映射
          const permissionMap = dataPermissionMap[child.id];
          // 是否有该权限
          const hasPermission =
            (Array.isArray(permissionMap) && permissionMap.includes(key)) ||
            key === permissionMap;
          // 该权限是否有值
          const childValue = _.get(child, ['value', key], {});
          if (hasPermission) {
            // value 为空 则置为null
            Object.assign(value, {
              [key]:
                typeof childValue !== 'boolean' && _.isEmpty(childValue)
                  ? null
                  : childValue,
            });
          }
        });
        Object.assign(rolePermission, value);
      } else {
        permissions.push({
          ...(child.value || {}),
          operation_id: child.id,
        });
      }
    });
  });
  if (!_.isEmpty(permissions)) {
    Object.assign(rolePermission, { permissions });
  }
  return rolePermission;
};

/**
 * 权限数据 UI -> API
 * @param {*} permissionList
 * @param {*} dataPermissionMap
 */

/**
 * @description 权限数据格式化
 * @author cailuqi@sensorsdata.cn
 * @param {array} permissionList 完整的权限列表
 * @param {object} rolePermission 当前角色权限
 * @param {object} config 配置 isView: boolean 是否查看模式
 */
export default function formatCreator(dataPermissionMap) {
  return [
    (permissionList, rolePermission, config, getDefaultValue) => {
      return mapApiToUi(
        permissionList,
        dataPermissionMap,
        rolePermission,
        config,
        getDefaultValue
      );
    },
    currentPermissionList => {
      return mapUiToApi(currentPermissionList, dataPermissionMap);
    },
  ];
}
