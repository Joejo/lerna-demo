function wordAndNumFormat(str) {
  const wordReg = /^[A-za-z]+$/g;

  return (
    str
      // 切割字母数字
      .replace(/[0-9]+/g, ',$&,')
      // 拼装成数组
      .split(',')
      .filter((child) => child)
      .map((child) => {
        if (wordReg.test(child)) {
          // 取字母片段首字母
          return child.substring(0, 1);
        }
        return child;
      })
      .join('')
  );
}

/**
 * 标签名称格式化
 * @param value 源字符串
 * @param pinyin 拼音库
 * @param user_first_word_limit 名称字符长度限制
 * @param prefix_length 名称字符前缀长度
 * @returns {*}
 */
export default function formatTagName({
  value,
  pinyin,
  user_first_word_limit,
  prefix_length}
) {
  let flag = 0;

  const list = pinyin(value, {
    style: pinyin.STYLE_NORMAL,
  });

  return list
    .map((item) => {
      // 校验纯字母
      const wordReg = /^[A-za-z]+$/g;
      // 校验纯数字
      const numReg = /^[0-9]+$/g;
      // 判断字母数字
      const wordAndNum = /^\w$/g;

      if (wordReg.test(item[0])) {
        // 返回拼音首字母
        return item[0].substring(0, 1);
      } else if (numReg.test(item[0])) {
        // 返回纯数字
        return item[0];
      } else if (wordAndNum.test(item[0])) {
        // 对字母数字片段处理
        return wordAndNumFormat(item[0]);
      }
      return (
        item[0]
          // 去除非字母数字字符
          .replace(/\W+/g, '_')
          .split('_')
          .filter((child) => child)
          .map(
            // 对字母数字片段处理
            (child) => wordAndNumFormat(child)
          )
          .join('')
      );
    })
    .map((item) => {
      if (flag > user_first_word_limit - prefix_length) {
        // 判断游标是否超过最长
        return '';
      } else if (flag + item.length > user_first_word_limit - prefix_length) {
        // 怕段游标下一个元素长度是否超过最长
        const fixedLength = user_first_word_limit - prefix_length - flag;

        // 超过最长就需要做切割
        flag = user_first_word_limit - prefix_length;
        return item.substring(0, fixedLength);
      }
      flag += item.length;
      return item;
    })
    .filter((item) => item)
    .join('');
}
