/**
 * @file 检查规则是否满足条件
 * @author cailuqi@sensorsdata.cn
 */
import _ from 'lodash';
const notAllowFunctionList = ['equal', 'less', 'most'];
const noNeedParam = [
  'isSet',
  'notSet',
  'isEmpty',
  'isNotEmpty',
  'isTrue',
  'isFalse'
];
const needTwoParam = [
  'absolute_between',
  'relative_within',
  'relative_between',
  'relative_before',
  'between'
];
/**
 * 检测 filter param 是否有效值
 */
const checkFilterParamValied = params => {
  if (Array.isArray(params)) {
    return !(
      params.length === 0 ||
      [null, undefined, ''].some(item => params.includes(item))
    );
  }
  return !(params === undefined || params === null || params === '');
};

const formatFilterCondition = (filters = []) => {
  let flag = true;
  // 存在 subfilters 则证明有多个 condition
  let newFilters = _.cloneDeep(filters);
  const subfilters = _.get(filters, ['0', 'subfilters']);
  if (subfilters) {
    newFilters = subfilters;
  }
  newFilters = newFilters.filter(item => {
    flag =
      noNeedParam.includes(item.function) ||
      checkFilterParamValied(item.params);
    return flag;
  });
  let result = [];
  if (newFilters.length === 1) {
    result = newFilters;
  } else if (newFilters.length > 1) {
    result = [
      {
        ...filters[0],
        subfilters: newFilters
      }
    ];
  }
  return {
    validate: flag,
    data: result
  };
};

export default (tagConfig = {}, isErrorReturn = true) => {
  tagConfig = _.cloneDeep(tagConfig)
  // 获取三种规则条件
  const allRule = tagConfig.rules || [];
  let event = {},
    profile = {},
    eventSequence = {};
  // 遍历找出三种规则条件
  allRule.forEach(item => {
    const { rules = [] } = item;
    const { type, rules: itemRules = [] } = rules[0] || {};
    if (
      type === 'event_rule' ||
      itemRules.find(item => item.type === 'event_rule')
    ) {
      event = item;
    } else if (
      type === 'profile_rule' ||
      itemRules.find(item => item.type === 'profile_rule')
    ) {
      profile = item;
    } else if (type === 'event_sequence_rule') {
      eventSequence = item;
    }
  });

  let flag = true; // 检测通过
  let resultFlag = true; // 传出数据为有效数据

  if (!(profile.rules || []).length && !(eventSequence.rules || []).length) {
    if (!(event.rules || []).length) {
      // 所有规则未填写
      tagConfig.error = {
        title: '请添加规则'
      };
      flag = false;
      resultFlag = false;
    } else {
      Reflect.deleteProperty(tagConfig, 'error');
    }
  } else if ((eventSequence.rules || []).length) {
    if (
      eventSequence.rules.find(item => !item.steps || item.steps.length < 2)
    ) {
      tagConfig.error = {
        title: '行为序列需要至少两个事件'
      };
      flag = false;
      resultFlag = false;
    } else {
      Reflect.deleteProperty(tagConfig, 'error');
    }
  } else {
    Reflect.deleteProperty(tagConfig, 'error');
  }

  // 用户属性规则条件值不为空 或者 为特定不需要值的 function
  if (profile.rules) {
    const checkProfileRule = rule => {
      const { params = [], function: cFuntion } = rule;
      // 用户属性验证
      let profileRuleFLag = true;
      if (
        (!noNeedParam.includes(cFuntion) && !params.length) ||
        params.includes(null) ||
        params.includes(undefined)
      ) {
        rule.error = '值不能为空';
        flag = false;
        profileRuleFLag = false;
      } else if (
        // 必须含有多个参数，且不能为空
        needTwoParam.includes(cFuntion) &&
        (params.length < 2 ||
          params.includes(undefined) ||
          params.includes(null) ||
          params.includes(''))
      ) {
        rule.error = '区间值必填';
        flag = false;
        profileRuleFLag = false;
      } else {
        Reflect.deleteProperty(rule, 'error');
      }
      return {
        validate: profileRuleFLag,
        data: rule
      };
    };
    // 按照 是否返回错误 处理
    if (isErrorReturn) {
      profile.rules.forEach(item => {
        if (item.rules) {
          item.rules.forEach(rule => (rule = checkProfileRule(rule).data));
        } else if (item.params) {
          item = checkProfileRule(item);
        }
      });
    } else {
      profile.rules.forEach((item, index) => {
        if (item.rules) {
          item.rules = item.rules.filter(rule => checkProfileRule(rule).validate);
          if (_.isEmpty(item.rules)) {
            profile.rules[index] = null;
          }
        } else if (item.params) {
          profile.rules[index] = checkProfileRule(item).validate ? item : null;
        }
      });
      profile.rules = profile.rules.filter(item => item);
    }
  }
  // 事件属性规则条件值规则
  if (event.rules) {
    const checkEventRule = (rule = []) => {
      let error = false;
      if (
        !rule.params.length ||
        rule.params.includes(null) ||
        rule.params.includes(undefined)
      ) {
        error = '值不能为空';
      } else if (rule.function === 'between') {
        if (rule.params.length === 1) {
          error = '区间值必填';
        } else if (
          rule.params.length === 2 &&
          typeof rule.params[0] === 'undefined'
        ) {
          error = '区间值必填';
        }
        // 区间值大小颠倒，则对调顺序
        if (rule.params[0] > rule.params[1]) {
          rule.params = [rule.params[1], rule.params[0]];
        }
      } else if (
        // 所填值不能为空 或 小于 0
        (!notAllowFunctionList.includes(rule.function) &&
          rule.params[0] !== 0 &&
          !rule.params[0]) ||
        ('less' === rule.function && rule.params[0] === 0)
      ) {
        error = '值应为自然数';
      }
      if (rule.filters) {
        const { validate, data } = formatFilterCondition(rule.filters);
        if (isErrorReturn) {
          if(!validate){
            error = '筛选条件不正确'
          }
        } else {
          rule.filters = data;
        }
      }
      if (error) {
        rule.error = error;
        flag = false;
      } else {
        Reflect.deleteProperty(rule, 'error');
      }
      return {
        validate: !error,
        data: rule
      };
    };
    if (isErrorReturn) {
      event.rules.forEach(item => {
        if (item.rules) {
          item.rules.forEach(rule => (rule = checkEventRule(rule).data));
        } else if (item.params) {
          item = checkEventRule(item);
        }
      });
    } else {
      event.rules.forEach((item, index) => {
        if (item.rules) {
          item.rules = item.rules.filter(rule => checkEventRule(rule).validate);
          if (_.isEmpty(item.rules)) {
            event.rules[index] = null;
          }
        } else if (item.params) {
          event.rules[index] = checkEventRule(item).validate ? item : null;
        }
      });
      event.rules = event.rules.filter(item => item);
    }
  }

  if (eventSequence.rules) {
    eventSequence.rules.forEach(item => {
      if (item.steps) {
        item.steps.forEach(step => {
          const { validate, data } = formatFilterCondition(step.filters);
          if (!isErrorReturn) {
            step.filters = data;
          }

          if (!validate) {
            flag = false;
          }
        });
      }
    });
  }

  // 判断行为序列筛选值
  if (!isErrorReturn) {

    // 重新判断是否无规则
    if (
      !(profile.rules || []).length &&
      !(eventSequence.rules || []).length &&
      !(event.rules || []).length
    ) {
      // 所有规则未填写
      tagConfig.error = {
        title: '请添加有效规则'
      };
      flag = false;
      resultFlag = false;
    }
    // 删除 rules 为空的数据
    tagConfig.rules = allRule.filter(item => item.rules && item.rules.length);
  }
  return {
    validate: flag,
    resultValidate: isErrorReturn ? flag : resultFlag,
    data: tagConfig
  };
};
