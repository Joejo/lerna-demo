/**
 * @file cron 表达式
 * @author lihongliang@sensorsdata.cn
 */

const unitMap = {
  week: '每周',
  day: '每天',
  month: '每月'
};

const dateUnit = '日';
const dayInWeek = [
  '星期日',
  '星期一',
  '星期二',
  '星期三',
  '星期四',
  '星期五',
  '星期六',
  '星期日'
];
const format = str => {
  if (!str || typeof str !== 'string') {
    return '';
  }
  let items = str.split(' ');
  if (items.length > 0) {
    let unit = '';
    if (items[3] === '*' && items[4] === '*' && items[5] === '?') {
      unit = 'day';
    } else if (items[3] === '?' && items[4] === '*') {
      unit = 'week';
    } else if (items[4] === '*' && items[5] === '?') {
      unit = 'month';
    }

    let hour = items[2];
    if (hour === '*') {
      hour = Array.apply(null, { length: 24 });
    } else {
      hour = hour.split(',').map(item => parseInt(item, 10));
    }

    let week = items[5];
    if (week === '*') {
      week = Array.apply(null, { length: 7 });
    } else if (week === '?') {
      week = [];
    } else {
      week = week.split(',').map(item => parseInt(item, 10));
    }
    let day = items[3];
    if (day === '*') {
      day =
        unit === 'day'
          ? []
          : Array.apply(null, { length: 31 }).map(function(value, index) {
              return index + 1;
            });
    } else {
      day = day.split(',').map(item => parseInt(item, 10));
    }
    let minute = items[1];
    if (minute === '*') {
      minute = Array.apply(null, { length: 60 });
    } else {
      minute = minute.split(',').map(item => parseInt(item, 10));
    }
    const time = [];
    hour.forEach(h => {
      minute.forEach(m => {
        time.push(formatTimeNumber(h) + ':' + formatTimeNumber(m));
      });
    });
    return {
      unit: unit,
      week: week,
      day: day,
      time: time
    };
  } else {
    throw new Error('无效的 cron 表达式');
  }
};
const cron = {
  /**
   * 将特定结构转换为cron表达式
   * @param format {Object} 格式化结构
   * @param format.unit {String} 单位
   * @param format.week {Array} 每周的第几天
   * @param format.day {Array} 每月的几号
   * @param format.time {Array} 例如 ['10:00', '11:00']
   * @returns {String} eg:
   */
  toCron: format => {
    if (!format) {
      throw new Error('无效的结构输入');
    }

    const items = ['0', '0', '*', '*', '*', '*', '*'];
    // 单位
    switch (format.unit) {
      case 'day':
        // 小时
        items[3] = '*';
        items[4] = '*';
        items[5] = '?';
        break;
      case 'week':
        // 周
        const week = format.week || [];
        items[5] = week.join(',');
        items[3] = '?';
        items[4] = '*';
        break;
      case 'month':
        // 日期
        const day = format.day || [];
        items[3] = day.join(',');
        items[4] = '*';
        items[5] = '?';
        break;
      default:
        break;
    }
    const time = format.time || [];
    const hour = time.map(str => {
      return parseInt(str.split(':')[0]);
    });
    const minute = time.map(str => {
      return parseInt(str.split(':')[1]);
    });
    items[2] = hour.join(',');
    items[1] = Array.from(new Set(minute));
    return items.join(' ');
  },
  cronToText: str => {
    const obj = format(str);
    if (!obj) {
      return '';
    }
    const slices = [unitMap[obj.unit]];
    switch (obj.unit) {
      case 'week':
        slices.push(
          obj.week
            .map(function(item) {
              return dayInWeek[parseInt(item, 10) - 1];
            })
            .join('，')
        );
        break;
      case 'month':
        slices.push(
          obj.day
            .map(function(item) {
              return item + dateUnit;
            })
            .join('，')
        );
        break;
      default:
        break;
    }
    slices.push(obj.time.join('，'));
    return slices.join(' ');
  },
  cronFormat: str => {
    return format(str);
  }
};

const formatTimeNumber = (num) => {
  return num < 10 ? '0' + num : num;
};
export default cron;
