/**
 * @file localStorage 工具方法库
 * @author picheng@sensorsdata.cn
 */

const localStorage = window.localStorage;

export default {
  /**
   * 获取存储中的所有键值对
   *
   * @param {string=} namespace 指定命名空间
   */
  getAll(namespace) {
    let data = { ...localStorage };
    if (namespace) {
      const pre = `${namespace}.`;
      const filterData = {};
      for (let key in data) {
        if (key.indexOf(pre) === 0) {
          filterData[key.replace(pre, '')] = data[key];
        }
      }
      data = filterData;
    }
    for (let key in data) {
      try {
        data[key] = JSON.parse(data[key]);
      } catch (e) {}
    }
    return data;
  },

  /**
   * 返回键名对应的值
   *
   * @param {string} key 键名
   */
  getItem(key) {
    let value = localStorage.getItem(key);
    try {
      // 对 JSON 格式的值进行解析
      value = JSON.parse(value);
    } catch (e) {}
    return value;
  },

  /**
   * 把键值对添加到存储中
   *
   * @param {string} key 键名
   * @param {*} value 键值
   */
  setItem(key, value) {
    try {
      // 将 Object 格式的值转换为 JSON 字符串
      value = JSON.stringify(value);
    } catch (e) {}
    localStorage.setItem(key, value);
  },

  /**
   * 删除指定键名的值
   *
   * @param {string} key 键名
   */
  removeItem(key) {
    localStorage.removeItem(key);
  },

  /**
   * 清空存储中的所有键名
   *
   * @param {string=} namespace 指定命名空间
   */
  clear(namespace) {
    if (namespace) {
      const pre = `${namespace}.`;
      for (let key in localStorage) {
        if (key.indexOf(pre) === 0) {
          localStorage.removeItem(key);
        }
      }
    } else {
      localStorage.clear();
    }
  },

  /**
   * 创建一个具有命名空间的 localStorage 工具方法库
   *
   * @param {string} namespace 指定命名空间
   * @return {Object} 新的 localStorage 工具方法库
   */
  createLib(namespace) {
    const me = this;
    const lib = {};
    ['getAll', 'getItem', 'setItem', 'removeItem', 'clear'].map(fnName => {
      lib[fnName] = function() {
        const params = Array.from(arguments);
        params[0] = params[0] ? `${namespace}.${params[0]}` : namespace;
        return me[fnName].apply(me, params);
      };
    });
    return lib;
  }
};
